buildscript {
    repositories {
        jcenter()
        maven {
            name = "Forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.1.2'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle.forge'

apply from: 'https://gist.githubusercontent.com/UpcraftLP/0a98a7dfe913bd3e99073efa7ad0353b/raw/mod_script.gradle'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.
import java.time.Year


def username = "${modid}"
if (project.hasProperty('dev_mail')) {
    username = "${dev_mail}"
} else if (project.hasProperty('dev_username')) {
    username = "${dev_username}"
}

def artifactID = project.hasProperty('maven-artifact') ? findProperty('maven_artifact') : project.archivesBaseName
def buildTimeStamp = new Date().getTime()

def buildVersion = project.mod_version + ext.buildName
version = "${project.mc_version}-" + buildVersion
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//noinspection GroovyUnusedAssignment
archivesBaseName = project.modid
tasks.build.doFirst { println("Current version is ${modid}-${version}") }

sourceCompatibility = targetCompatibility = project.jvm_version // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = project.jvm_version
}

repositories {

    maven {
        //JEI files
        name = "DVS1 Maven FS"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "http://modmaven.k-4u.nl"
    }

    maven {
        //hwyla
        name = "TehNut"
        url = "https://tehnut.info/maven"
    }

    //local maven, if present
    mavenLocal()

    maven {
        //fallback for almost everything, this is CurseForge :P
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven"
    }

    maven {
        //get dependencies from github
        name = "JitPack"
        url = "https://jitpack.io"
    }

    maven { //sphinx4
        name = "Sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }

}

minecraft {
    version = "${project.mc_version}-${project.forge_version}"
    if (project.hasProperty('runDir')) {
        runDir = project.runDir
    } else if (file('../run').exists()) {
        runDir = "../run"
    } else {
        runDir = "run"
    }

    mappings = project.forge_mappings
    if ("${mappings}" != "${project.ext.mappings}" && "${mappings}".startsWith("snapshot_")) {
        println(String.format("You are on old mappings, latest mappings are %s (you are on %s)", project.ext.mappings, mappings))
    }
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replace "@VERSION@", project.mod_version
    def fingerPrintKey = project.hasProperty('public_key') ? findProperty('public_key').replace(":", "").toLowerCase(Locale.ROOT) : "undefined"
    replace "@FINGERPRINTKEY@", fingerPrintKey
    replace "@UPDATE_JSON@", project.update_json
    replace "required-after:forge", "required-after:forge@[" + project.forge_version + ",)"
    replace "required-after:glasspane", "required-after:glasspane@[" + project.gp_version + ",)"
    replaceIn "${project.reference_class}".replace(".", "/") + ".java"

    //auto-configure the run arguments
    if (project.hasProperty('dev_uuid')) {
        clientRunArgs += "--uuid=${dev_uuid}"
    } else {
        clientRunArgs += "--username=${username}"
        if (project.hasProperty('dev_password')) clientRunArgs += "--password=${dev_password}"
    }

    //skip the screen to confirm that you want to load a world with missing registry entries
    serverJvmArgs += "-Dfml.doNotBackup=true"
    clientJvmArgs += "-Dfml.doNotBackup=true"

    // skip having to confirm on server
    serverJvmArgs += "-Dfml.queryResult=confirm"

    // disable server gui
    serverRunArgs += "nogui"

    //skip jansi warnings in the log
    serverJvmArgs += '-Dlog4j.skipJansi=true'
    clientJvmArgs += '-Dlog4j.skipJansi=true'
}

configurations {
    contained {
        transitive = false
    }
    //compile.extendsFrom contained
}

dependencies {

    compile "com.github.glasspane:GlassPane:${gp_version}"

    compile "edu.cmu.sphinx:sphinx4-core:5prealpha-SNAPSHOT"
    contained "edu.cmu.sphinx:sphinx4-core:5prealpha-SNAPSHOT"

    compile "edu.cmu.sphinx:sphinx4-data:5prealpha-SNAPSHOT"
    contained "edu.cmu.sphinx:sphinx4-data:5prealpha-SNAPSHOT"
}

// API jar
task apiJar(type: Jar) {
    onlyIf {
        project.hasProperty("api_package")
    }
    from sourceSets.main.allJava
    include findProperty("api_package").toString().replace(".", "/") + "/**"
    from("LICENSE") {
        include "*"
    }
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + '-api',
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${artifactID}:${project.version}:api",
            "Timestamp": buildTimeStamp,
            "Built-On": "${mc_version}-${forge_version}"
    )
    classifier = 'api'
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    from("LICENSE") {
        include "*"
    }
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + '-javadoc',
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${artifactID}:${project.version}:javadoc",
            "Timestamp": buildTimeStamp,
            "Built-On": "${mc_version}-${forge_version}"
    )
    classifier = 'javadoc'
}

jar {
    from(configurations.contained.resolvedConfiguration.resolvedArtifacts.collect {
        def ft = fileTree(it.file)
        FileTree zt = zipTree(it.file)
        File f = zt.find {it.name == "MANIFEST.MF"} as File
        if(f == null || !f.text.contains("Maven-Artifact")) {
            File newFile = file("${buildDir}/tmp/artifactMeta/${it.file.name}.meta")
            newFile.parentFile.mkdirs()
            newFile.text = "Maven-Artifact: ${it.moduleVersion}"
            ft += newFile
        }
        ft
    }) {
        into "META-INF/libraries"
    }
    from sourceSets.api.output
    from "LICENSE"
    manifest.mainAttributes(
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.mod_version}",
            "Maven-Artifact": "${project.group}:${artifactID}:${project.version}",
            "Timestamp": buildTimeStamp,
            "Built-On": "${project.mc_version}-${project.forge_version}",
            'ContainedDeps': configurations.contained.files.collect { it.name }.join(" ")
            //"FMLAT": "${project.modid}_at.cfg"
    )
}

task signApiJar(type: SignJar, dependsOn: apiJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = apiJar.archivePath
    outputFile = apiJar.archivePath
}

task signJavadocJar(type: SignJar, dependsOn: javadocJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = javadocJar.archivePath
    outputFile = javadocJar.archivePath
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

if (project.hasProperty("api_package")) tasks.build.dependsOn signApiJar
tasks.build.dependsOn signJar, signJavadocJar
tasks.curseforge.dependsOn build

artifacts {
    archives javadocJar
    if (project.hasProperty("api_package")) archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact javadocJar
            if (project.hasProperty("api_package")) artifact apiJar
        }
    }

    repositories {
        mavenLocal()
    }
}

def curseRelations = {
    //requiredDependency '' //add curseforge-slug here
    requiredDependency 'glasspane'
}


curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    if (project.hasProperty('curse_id')) {
        project {
            id = project.curse_id
            changelogType = 'markdown'
            changelog = "${project.ext.changeLog}"
            releaseType = project.release_type

            relations curseRelations

            addArtifact javadocJar
            //addArtifact sourceJar
            //addArtifact apiJar

            //cursegradle will automatically determine the current version
            //addGameVersion '1.12'
            //addGameVersion '1.12.1'
            //addGameVersion '1.12.2'

            mainArtifact(jar) {
                displayName = "${project.mod_name} v${project.mod_version} MC${project.mc_version}"
            }
        }
    }
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'modid': project.modid, 'name': project.mod_name, 'description': project.mod_description, 'version': project.mod_version, 'mcversion': project.minecraft.version, 'url': project.url, 'updateUrl': project.update_json, 'year': String.valueOf(Year.now().getValue())
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }

            //ATs
            rename '(.+_at.cfg)', 'META-INF/$1'
        }
